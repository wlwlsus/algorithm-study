#재귀적 동적 계획법
def fibo(n):
    """
    저장해둔 c[n]의 값 : 1
    저장해둔 c[n]의 값 : 2
    [0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0]
    저장해둔 c[n]의 값 : 3
    [0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0]
    저장해둔 c[n]의 값 : 5
    [0, 0, 1, 2, 3, 5, 0, 0, 0, 0, 0]
    저장해둔 c[n]의 값 : 8
    [0, 0, 1, 2, 3, 5, 8, 0, 0, 0, 0]
    저장해둔 c[n]의 값 : 13
    [0, 0, 1, 2, 3, 5, 8, 13, 0, 0, 0]
    저장해둔 c[n]의 값 : 21
    [0, 0, 1, 2, 3, 5, 8, 13, 21, 0, 0]
    저장해둔 c[n]의 값 : 34
    [0, 0, 1, 2, 3, 5, 8, 13, 21, 34, 0]
    저장해둔 c[n]의 값 : 55
    """
    # 탈출 조건 
    if n<2:
        #처음 함수 실행시 최하단(n<2)까지 타고 와서 1을 반환한다.
        return n
    
    if c[n] != 0:
        #리스트를 검사해서 이전에 계산한 결과가 있는지 확인한다. 있다면 반환
        return c[n]

    #한 번 연산 진행한 결과는 리스트에 저장한다.
    c[n] = fibo(n-1) + fibo(n-2)
    # 필요할 때 저장해둔 c[n]을 사용한다.
    return fibo(n)

m = int(input())
#재귀 함수 스택 초기화
c=[0 for _ in range(m+1)]
print(fibo(m))